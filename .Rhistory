print(pc_sh_status)
# Filter for the top 10 property types and calculate percentages
top_property_types <- BCN_Accomm %>%
count(property_type, sort = TRUE) %>%
slice_max(n, n = 10) %>%  # Keep the top 10 most frequent property types
mutate(percentage = n / sum(n) * 100)  # Calculate percentages
# Create the bar plot with percentages and labels
top_property <- ggplot(top_property_types, aes(x = reorder(property_type, percentage), y = percentage, fill = property_type)) +
geom_col() +
geom_text(aes(label = paste0(round(percentage, 1))), hjust = -0.2, size = 4) +  # Add percentage labels
coord_flip() +  # Flip coordinates for better readability
labs(title = "Top 10 Property Types by Percentage", x = "Property Type", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))  # Center and bold title)
print(top_property)
# Reshape the dataset to long format
BCN_Accomm_long <- BCN_Accomm %>%
pivot_longer(cols = c(room_type), names_to = "variable", values_to = "value")
# Calculate the percentage for each category within the room_type variable
BCN_Accomm_percentage <- BCN_Accomm_long %>%
group_by(variable, value) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Create a barplot
room_type_plot <- ggplot(BCN_Accomm_percentage, aes(x = value, y = percentage, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Barplot for Room Type", x = "Category", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
print(room_type_plot)
# Filter for the top 10 neighbourhoods and calculate percentages
top_neighbourhoods <- BCN_Accomm %>%
count(neighbourhood, sort = TRUE) %>%
slice_max(n, n = 10) %>%
mutate(percentage = n / sum(n) * 100)  # Calculate percentages
# Create the plot with percentages and labels
top_neighbourhoods <- ggplot(top_neighbourhoods, aes(x = reorder(neighbourhood, percentage), y = percentage, fill = neighbourhood)) +
geom_col() +
geom_text(aes(label = paste0(round(percentage, 1))), hjust = -0.2, size = 4) +  # Add percentage labels
coord_flip() +
labs(title = "Top 10 Neighbourhoods by Percentage", x = "Neighbourhood", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
print(top_neighbourhoods)
# Combine all amenities into a single text string and clean it
amenities_text <- BCN_Accomm$amenities %>%
paste(collapse = " ") %>%                # Combine all rows into one string
gsub("\\[|\\]|'", "", .)                 # Remove brackets and quotes from the field
# Split the text into words and calculate word frequencies
word_freq <- table(unlist(strsplit(amenities_text, ", ")))
# Create the word cloud
wordcloud(words = names(word_freq),
freq = as.numeric(word_freq),
min.freq = 10,                   # Minimum frequency for words to appear
scale = c(3, 0.5),               # Word size scale
random.order = FALSE,            # Words ordered by frequency
colors = brewer.pal(8, "Dark2"))
BCN_Acomm %>%
lim = Q3 + 1.5 * IQR
lim <- BCN_Acomm %>%
Q3 + 1.5 * IQR
data_cleaned_price <- BCN_Accomm %>%
filter(
!is.na(price),
!is.na(latitude),
!is.na(longitude),
!is.na(room_type),
!is.na(bedrooms),
!is.na(bathrooms),
price < 500  # Include only prices lower than 1000
) %>%
mutate(
room_type = as.factor(room_type),             # Convert room_type to a factor
host_is_superhost = as.factor(host_is_superhost)  # Convert host_is_superhost to a factor
)
model_gam_4 <- gam(price ~ s(latitude, longitude) + s(review_scores_rating) + s(bathrooms) + s(bedrooms) + room_type + host_is_superhost,
data = data_cleaned_price)
summary(model_gam_4)
data_cleaned_price <- BCN_Accomm %>%
filter(
!is.na(price),
!is.na(latitude),
!is.na(longitude),
!is.na(room_type),
!is.na(bedrooms),
!is.na(bathrooms),
price < 1000  # Include only prices lower than 1000
) %>%
mutate(
room_type = as.factor(room_type),             # Convert room_type to a factor
host_is_superhost = as.factor(host_is_superhost)  # Convert host_is_superhost to a factor
)
model_gam_4 <- gam(price ~ s(latitude, longitude) + s(review_scores_rating) + s(bathrooms) + s(bedrooms) + room_type + host_is_superhost,
data = data_cleaned_price)
summary(model_gam_4)
# Calculate Q1, Q3, and IQR for the price variable
Q1 <- quantile(BCN_Accomm$price, 0.25)
Q3 <- quantile(BCN_Accomm$price, 0.75)
IQR <- Q3 - Q1
# Add a column to indicate outliers
BCN_Accomm_sub_outlier <- BCN_Accomm %>%
mutate(is_outlier = price < (Q1 - 1.5 * IQR) | price > (Q3 + 1.5 * IQR))
# Count the number of outliers
outliers_count <- sum(BCN_Accomm_sub_outlier$is_outlier)
# Display outliers count
outliers_count
install.packages(c("dplyr", "ggplot2", "tidyr", "RColorBrewer", "leaflet", "shiny", "leaflet.extras", "corrplot", "treemap", "wordcloud", "mgcv", "gratia", "rsample"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
library(mgcv) # GAM
library(gratia)
library(rsample)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
nrow(data_split)
nrows(data_test)
nrow(data_test)
nrow(test_data)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(review_scores_rating),
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
test_data$predicted_price
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
library(mgcv) # GAM
library(gratia)
library(rsample)
library(Metrics)
install.packages("Metrics")
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
library(mgcv) # GAM
library(gratia)
library(rsample)
library(Metrics)
# MAE
mae_value_model_1 <- mae(test_data$price, test_data$predicted_price)
# RMSE
rmse_value_model_1 <- rmse(test_data$price, test_data$predicted_price)
# Print metrics
cat("MAE:", mae_value_model_1, "\n")
cat("RMSE:", rmse_value_model_1, "\n")
library(ggplot2)
# Plot actual vs predicted prices
ggplot(test_data, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs Predicted Prices", x = "Actual Price", y = "Predicted Price") +
theme_minimal()
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(review_scores_rating) + s(bathrooms) + s(bedrooms) + room_type,
data = train_data)
# Summarize the model
summary(model_gam_train)
model_gam <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
summary(model_gam)
model_gam_adjusted <- gam(log_price ~ s(latitude, longitude) + s(accommodates) +
s(bathrooms) + s(bedrooms) + s(review_scores_rating) +
s(availability_365) + te(latitude, longitude, by = room_type) +
room_type + host_is_superhost,
data = train_data, select = TRUE)
model_gam_adjusted <- gam(log(price) ~ s(latitude, longitude) + s(accommodates) +
s(bathrooms) + s(bedrooms) + s(review_scores_rating) +
s(availability_365) + te(latitude, longitude, by = room_type) +
room_type + host_is_superhost,
data = train_data, select = TRUE)
summary(model_gam_adjusted)
# Covert the categorical as a Factor and not incluide missing values
data_cleaned <- BCN_Accomm %>%
filter(!is.na(price), !is.na(latitude), !is.na(longitude), !is.na(room_type), !is.na(bedrooms), !is.na(bathrooms)) %>% # Not include Missing Values
mutate(
room_type = as.factor(room_type),
host_is_superhost = as.factor(host_is_superhost),
neighbourhood = as.factor(neighbourhood)
)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
# Summarize the model
summary(model_gam_train)
# MAE
mae_value_model_1 <- mae(test_data$price, test_data$predicted_price)
# RMSE
rmse_value_model_1 <- rmse(test_data$price, test_data$predicted_price)
# Print metrics
cat("MAE:", mae_value_model_1, "\n")
cat("RMSE:", rmse_value_model_1, "\n")
# Plot actual vs predicted prices
ggplot(test_data, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs Predicted Prices", x = "Actual Price", y = "Predicted Price") +
theme_minimal()
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
test_data$neighbourhood <- factor(test_data$neighbourhood, levels = levels(train_data$neighbourhood))
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Check levels of a categorical variable
levels(train_data$room_type)
levels(test_data$room_type)
test_data$room_type <- factor(test_data$room_type, levels = levels(train_data$room_type))
test_data$neighbourhood <- factor(test_data$neighbourhood, levels = levels(train_data$neighbourhood))
test_data$host_is_superhost <- factor(test_data$host_is_superhost, levels = levels(train_data$host_is_superhost))
test_data$room_type
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Plot actual vs predicted prices
ggplot(test_data, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs Predicted Prices", x = "Actual Price", y = "Predicted Price") +
theme_minimal()
options(repos = c(CRAN = "https://cran.rstudio.com/"))
#file.edit("~/.Rprofile")
knitr::opts_chunk$set(echo = TRUE)
#options(repos = c(CRAN = "https://cran.rstudio.com/"))
knitr::include_graphics("Barcelona Picture.png")
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
library(mgcv) # GAM
library(gratia)
library(rsample)
library(Metrics)
# import the dataset
BCN_Accomm_full <- read.csv("Cleaned_airbnb_barcelona.csv")
# Structure
glimpse(BCN_Accomm_full)
setwd("C:/Users/cabar/Documents/Git/Machine-Learning-1")
options(repos = c(CRAN = "https://cran.rstudio.com/"))
#file.edit("~/.Rprofile")
knitr::opts_chunk$set(echo = TRUE)
#options(repos = c(CRAN = "https://cran.rstudio.com/"))
knitr::include_graphics("Barcelona Picture.png")
# Load required libraries
library(dplyr)        # Data manipulation and wrangling
library(ggplot2)      # Data visualization
library(tidyr)        # Data tidying
library(RColorBrewer) # Color palettes for visualizations
library(leaflet)      # Interactive maps
library(shiny)        # Building interactive web applications
library(leaflet.extras) # Additional features for leaflet maps
library(corrplot)     # Visualization of correlation matrices
library(mice)         # Handling missing data
library(nnet)         # Multinomial regression model
library(forcats)      # Handling categorical variables
library(patchwork)    # Combining multiple ggplots
library(VGAM)         # Multinomial logistic regression models
library(tidyverse)    # Collection of data science packages
library(e1071)        # Support Vector Machines (SVM)
library(reshape2)     # Data reshaping for ggplot visualizations
library(caret)        # Machine learning and model evaluation
library(wordcloud)    # Wordcloud plot
library(rsample)      # Split dataset into training and testing
library(mgcv)         # Gam Mdels
# import the dataset
BCN_Accomm_full <- read.csv("Cleaned_airbnb_barcelona.csv")
# Structure
glimpse(BCN_Accomm_full)
set.seed(100)
BCN_Accomm_sub <- sample_n(BCN_Accomm_full, 10000)
glimpse(BCN_Accomm_sub)
BCN_Accomm_sub$price <- gsub(",", "", BCN_Accomm_sub$price) # removed ','
BCN_Accomm_sub$price <- gsub("\\$", "", BCN_Accomm_sub$price) # removed '$' sign
BCN_Accomm_sub$price <- as.numeric(BCN_Accomm_sub$price)  # converted to number format
print('Location of missing values')
# find location of missing values column wise
sapply(BCN_Accomm_sub, function(x) which(is.na(x)))
# count the missing values column wise
sapply(BCN_Accomm_sub, function(x) sum(is.na(x)))
md.pattern(BCN_Accomm_sub, rotate.names = TRUE)
# Total observations
total_rows <- nrow(BCN_Accomm_sub)
# Calculate missing values (count and percentage)
missing_values <- data.frame(
#Variable = names(BCN_Accomm_full),
Missing_Count = colSums(is.na(BCN_Accomm_sub)),
Missing_Percent = paste0(round((colSums(is.na(BCN_Accomm_sub)) / total_rows) * 100, 2), "%"))
# Order DataFrame table in descending order
missing_values <- missing_values[order(-missing_values$Missing_Count), ]
# Display the table
knitr::kable(missing_values,
caption = "Missing Values by Variable",
align = "c")
# Total observations
total_rows <- nrow(BCN_Accomm_sub)
# Calculate missing values (count and percentage)
missing_values <- data.frame(
#Variable = names(BCN_Accomm_full),
Missing_Count = colSums(is.na(BCN_Accomm_sub)),
Missing_Percent = paste0(round((colSums(is.na(BCN_Accomm_sub)) / total_rows) * 100, 2), "%"))
# Order DataFrame table in descending order
missing_values <- missing_values[order(-missing_values$Missing_Count), ]
# Display the table
knitr::kable(missing_values,
caption = "Missing Values by Variable",
align = "c")
# Create a new data frame with the imputed review_scores_rating column
imp_BCN_Accomm_sub <- BCN_Accomm_sub %>%
mutate(review_scores_rating = if_else(is.na(review_scores_rating), 0, review_scores_rating))
md.pattern(imp_BCN_Accomm_sub, rotate.names = TRUE)
BCN_Accomm <- na.omit(imp_BCN_Accomm_sub) # from this point we'll use this data set
md.pattern(BCN_Accomm, rotate.names = TRUE)
# Create a correlation matrix for numeric fields
cor_BNC_Accomm <- select_if(BCN_Accomm, is.numeric) %>%
select(-c(id, X, host_id))
# make a data frame
cor_BNC_Accomm <- data.frame(cor_BNC_Accomm)
str(cor_BNC_Accomm)
# print correlation matrix
corrplot(cor(cor_BNC_Accomm), type = "upper", order = "hclust", tl.col = "black")
# Calculate Q1, Q3, and IQR for the price variable
Q1 <- quantile(BCN_Accomm$price, 0.25)
Q3 <- quantile(BCN_Accomm$price, 0.75)
IQR <- Q3 - Q1
# Add a column to indicate outliers
BCN_Accomm_sub_outlier <- BCN_Accomm %>%
mutate(is_outlier = price < (Q1 - 1.5 * IQR) | price > (Q3 + 1.5 * IQR))
# Count the number of outliers
outliers_count <- sum(BCN_Accomm_sub_outlier$is_outlier)
# Display outliers count
outliers_count
# Boxplot for price variable
boxplot(BCN_Accomm$price,
horizontal = TRUE,
axes = FALSE,
staplewex = 1,
ylim = c(2, 500),
main = "Boxplot of Price/Night Variable (€)")
# X Axis
axis(1, las = 1)
# Add text labels values (Q1, Q3, IQR)
stats <- boxplot.stats(BCN_Accomm$price)$stats
text(x = stats, y = 1.25, labels = stats, pos = 3, cex = 0.9)
# Filter dataset
BCN_Accomm <- BCN_Accomm %>%
filter(price <= 1000)
summary(BCN_Accomm$price)
# Create a correlation matrix for numeric fields
cor_BNC_Accomm_new <- select_if(BCN_Accomm, is.numeric) %>%
select(-c(id, X, host_id))
# make a data frame
cor_BNC_Accomm_new <- data.frame(cor_BNC_Accomm_new)
str(cor_BNC_Accomm)
# print correlation matrix
corrplot(cor(cor_BNC_Accomm_new), type = "upper", order = "hclust", tl.col = "black")
# converting categorical variables into factors
BCN_Accomm$neighbourhood <- as.factor(BCN_Accomm$neighbourhood)
BCN_Accomm$property_type <- as.factor(BCN_Accomm$property_type)
BCN_Accomm$room_type <- as.factor(BCN_Accomm$room_type)
BCN_Accomm$zipcode <- as.factor(BCN_Accomm$zipcode)
BCN_Accomm$accommodates <- as.factor(BCN_Accomm$accommodates)
# Replace invalid zipcodes with "unknown"
BCN_Accomm$zipcode <- ifelse(
grepl("^[0-9]{4}$", BCN_Accomm$zipcode),   # Check if zipcode is exactly 4 digits
BCN_Accomm$zipcode,                        # Keep valid zipcodes
"unknown")                                # Replace invalid zipcodes with "unknown"
set.seed(1000)
# Define the number of groups and the amount of sample for each
group <- sample(2, nrow(BCN_Accomm),
replace = TRUE,
prob = c(0.4, 0.4))
# training data set with around 60% of the samples
train <- BCN_Accomm[group==1,]
# test data set with around 40% of the samples
test <- BCN_Accomm[group==2,]
train$property_type <- droplevels(train$property_type)
test$property_type <- factor(test$property_type, levels = levels(train$property_type))
# Convert any factor variables that should be numeric
train$bathrooms <- as.numeric(as.character(train$bathrooms))
train$bedrooms <- as.numeric(as.character(train$bedrooms))
train$accommodates <- as.numeric(as.character(train$accommodates))
train$beds <- as.numeric(as.character(train$beds))
train$latitude <- as.numeric(train$latitude)
train$longitude <- as.numeric(train$longitude)
train$review_scores_rating <- as.numeric(train$review_scores_rating)
train$minimum_nights <- as.numeric(train$minimum_nights)
# Gam Model
gam_price <- gam(price ~
s(bathrooms) + s(bedrooms) + s(accommodates) +                       s(beds) +
s(latitude) + s(longitude) +
s(review_scores_rating) + s(minimum_nights) +
property_type + room_type,
data = train, method = "REML")
# Summary of the occupancy model
summary(gam_price)
# Predict prices on the test set
test$predicted_price <- predict(gam_price, newdata = test)
colSums(is.na(test))
colSums(is.na(train))
set.seed(1000)
# Define the number of groups and the amount of sample for each
group <- sample(2, nrow(BCN_Accomm),
replace = TRUE,
prob = c(0.4, 0.4))
# training data set with around 60% of the samples
train <- BCN_Accomm[group==1,]
# test data set with around 40% of the samples
test <- BCN_Accomm[group==2,]
test <- na.omit(test)
colSums(is.na(test))
# Gam Model
gam_price <- gam(price ~
s(bathrooms) + s(bedrooms) + s(accommodates) +                       s(beds) +
s(latitude) + s(longitude) +
s(review_scores_rating) + s(minimum_nights) +
property_type + room_type,
data = train, method = "REML")
str(train)
str(test)
