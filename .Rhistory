# Create histograms with facet_wrap
hist_num <- ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histograms for Numerical Variables", x = "Value", y = "Frequency") +
facet_wrap(~variable, scales = "free") +  # each plot with their own y axes
theme_minimal()
print(hist_num)
# Calculate percentages and relabel values
superhost_data <- BCN_Accomm %>%
count(host_is_superhost) %>%
mutate(
percentage = n / sum(n) * 100,  # Calculate percentages
host_is_superhost = recode(host_is_superhost, "f" = "False", "t" = "True")  # Relabel
)
# Create the pie chart with percentages
pc_sh_status <- ggplot(superhost_data, aes(x = "", y = n, fill = host_is_superhost)) +
geom_col() +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +  # Add percentages
labs(
title = "Proportion of Superhost Status",
fill = "Superhost Status\n(False = Not a Superhost, True = Superhost)"
) +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Center and bold title
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
print(pc_sh_status)
# Filter for the top 10 property types and calculate percentages
top_property_types <- BCN_Accomm %>%
count(property_type, sort = TRUE) %>%
slice_max(n, n = 10) %>%  # Keep the top 10 most frequent property types
mutate(percentage = n / sum(n) * 100)  # Calculate percentages
# Create the bar plot with percentages and labels
top_property <- ggplot(top_property_types, aes(x = reorder(property_type, percentage), y = percentage, fill = property_type)) +
geom_col() +
geom_text(aes(label = paste0(round(percentage, 1))), hjust = -0.2, size = 4) +  # Add percentage labels
coord_flip() +  # Flip coordinates for better readability
labs(title = "Top 10 Property Types by Percentage", x = "Property Type", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))  # Center and bold title)
print(top_property)
# Reshape the dataset to long format
BCN_Accomm_long <- BCN_Accomm %>%
pivot_longer(cols = c(room_type), names_to = "variable", values_to = "value")
# Calculate the percentage for each category within the room_type variable
BCN_Accomm_percentage <- BCN_Accomm_long %>%
group_by(variable, value) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Create a barplot
room_type_plot <- ggplot(BCN_Accomm_percentage, aes(x = value, y = percentage, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Barplot for Room Type", x = "Category", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
print(room_type_plot)
# Filter for the top 10 neighbourhoods and calculate percentages
top_neighbourhoods <- BCN_Accomm %>%
count(neighbourhood, sort = TRUE) %>%
slice_max(n, n = 10) %>%
mutate(percentage = n / sum(n) * 100)  # Calculate percentages
# Create the plot with percentages and labels
top_neighbourhoods <- ggplot(top_neighbourhoods, aes(x = reorder(neighbourhood, percentage), y = percentage, fill = neighbourhood)) +
geom_col() +
geom_text(aes(label = paste0(round(percentage, 1))), hjust = -0.2, size = 4) +  # Add percentage labels
coord_flip() +
labs(title = "Top 10 Neighbourhoods by Percentage", x = "Neighbourhood", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
print(top_neighbourhoods)
# Combine all amenities into a single text string and clean it
amenities_text <- BCN_Accomm$amenities %>%
paste(collapse = " ") %>%                # Combine all rows into one string
gsub("\\[|\\]|'", "", .)                 # Remove brackets and quotes from the field
# Split the text into words and calculate word frequencies
word_freq <- table(unlist(strsplit(amenities_text, ", ")))
# Create the word cloud
wordcloud(words = names(word_freq),
freq = as.numeric(word_freq),
min.freq = 10,                   # Minimum frequency for words to appear
scale = c(3, 0.5),               # Word size scale
random.order = FALSE,            # Words ordered by frequency
colors = brewer.pal(8, "Dark2"))
# Sample Shiny app for leaflet map with neighbourhood filter
ui <- fluidPage(
titlePanel("Airbnb Prices by Neighbourhood"),
sidebarLayout(
sidebarPanel(
# Dropdown to select neighbourhood
selectInput("neighbourhood", "Select Neighbourhood:", choices = sort(unique(BCN_Accomm$neighbourhood)))
),
mainPanel(
leafletOutput("map") # main content area where the map will be displayed
)
)
)
server <- function(input, output, session) {
# Dropdown to select neighbourhood, sorted alphabetically
filtered_data <- reactive({
BCN_Accomm[BCN_Accomm$neighbourhood == input$neighbourhood, ]
})
# Render leaflet map
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = 2.154007, lat = 41.390205, zoom = 12) %>% #Location of Barcelona
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
color = "blue",
popup = ~paste("Price: €", price)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Mean price per neighbourhood
neighborhood_means <- BCN_Accomm %>%
group_by(neighbourhood) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE))
# Create Map
leaflet(data = BCN_Accomm) %>%
addProviderTiles("CartoDB.Positron") %>%
addHeatmap(
lng = ~longitude,
lat = ~latitude,
intensity = ~price,
blur = 25,
max = 0.03,
radius = 15
) %>%
addMarkers(
data = neighborhood_means,
~longitude, ~latitude,
popup = ~paste(
"<strong>Neighborhood:</strong>", neighbourhood,
"<br><strong>Mean Price (€):</strong>", round(mean_price, 2)
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("viridis", BCN_Accomm$price),
values = BCN_Accomm$price,
title = "Price (€)",
opacity = 0.7
)
#display.brewer.all() #Visualize color palette
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price, color = room_type)) +
geom_point(alpha = 0.6) +
#scale_color_brewer(palette = "Set2") +
labs(title = "Scatter Plot of Review Score Rating vs. Price by Room Type",
x = "Review Score Rating",
y = "Price",
color = "Room Type") +
theme_minimal()
# Bedrooms vs Price
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "loess", color = "red") + # Loess: on-parametric method for fitting a curve to the data.
labs(title = "Price vs Review Score Ratings", x = "Review Score Rating", y = "Price")+
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
# Covert the categorical as a Factor and not incluide missing values
data_cleaned <- BCN_Accomm %>%
filter(!is.na(price), !is.na(latitude), !is.na(longitude), !is.na(room_type), !is.na(bedrooms), !is.na(bathrooms)) %>% # Not include Missing Values
mutate(
room_type = as.factor(room_type),
host_is_superhost = as.factor(host_is_superhost),
neighbourhood = as.factor(neighbourhood)
)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Plot actual vs predicted prices
ggplot(test_data, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs Predicted Prices", x = "Actual Price", y = "Predicted Price") +
theme_minimal()
# Sample Shiny app for leaflet map with neighbourhood filter
ui <- fluidPage(
titlePanel("Airbnb Prices by Neighbourhood"),
sidebarLayout(
sidebarPanel(
# Dropdown to select neighbourhood
selectInput("neighbourhood", "Select Neighbourhood:", choices = sort(unique(BCN_Accomm$neighbourhood)))
),
mainPanel(
leafletOutput("map") # main content area where the map will be displayed
)
)
)
server <- function(input, output, session) {
# Dropdown to select neighbourhood, sorted alphabetically
filtered_data <- reactive({
BCN_Accomm[BCN_Accomm$neighbourhood == input$neighbourhood, ]
})
# Render leaflet map
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = 2.154007, lat = 41.390205, zoom = 12) %>% #Location of Barcelona
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
color = "blue",
popup = ~paste("<b>Price:</b> €", price, "<br>",
"<b>Type:</b>", room_type, "<br>",
"<b>Neighbourhood:</b>", neighbourhood)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Sample Shiny app for leaflet map with neighbourhood filter
ui <- fluidPage(
titlePanel("Airbnb Prices by Neighbourhood"),
sidebarLayout(
sidebarPanel(
# Dropdown to select neighbourhood
selectInput("neighbourhood", "Select Neighbourhood:", choices = sort(unique(BCN_Accomm$neighbourhood)))
),
mainPanel(
leafletOutput("map") # main content area where the map will be displayed
)
)
)
server <- function(input, output, session) {
# Dropdown to select neighbourhood, sorted alphabetically
filtered_data <- reactive({
BCN_Accomm[BCN_Accomm$neighbourhood == input$neighbourhood, ]
})
# Render leaflet map
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = 2.154007, lat = 41.390205, zoom = 12) %>% #Location of Barcelona
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
color = "blue",
popup = ~paste("<b>Price:</b> €", price, "<br>",
"<b>Type:</b>", room_type, "<br>",
"<b>Neighbourhood:</b>", neighbourhood)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Sample Shiny app for leaflet map with neighbourhood filter
ui <- fluidPage(
titlePanel("Airbnb Prices by Neighbourhood"),
sidebarLayout(
sidebarPanel(
# Dropdown to select neighbourhood
selectInput("neighbourhood", "Select Neighbourhood:", choices = sort(unique(BCN_Accomm$neighbourhood)))
),
mainPanel(
leafletOutput("map") # main content area where the map will be displayed
)
)
)
server <- function(input, output, session) {
# Dropdown to select neighbourhood, sorted alphabetically
filtered_data <- reactive({
BCN_Accomm[BCN_Accomm$neighbourhood == input$neighbourhood, ]
})
# Render leaflet map
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = 2.154007, lat = 41.390205, zoom = 12) %>% #Location of Barcelona
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
color = "blue",
popup = ~paste("<b>Price:</b> €", price, "<br>",
"<b>Type:</b>", room_type, "<br>",
"<b>Neighbourhood:</b>", neighbourhood)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Filter the data
filtered_data <- train_data[train_data$price <= price_955 & train_data$availability_365 == 365, ]
price_955 <- quantile(train_data$price, 0.955, na.rm = TRUE)
# Filter the data
filtered_data <- train_data[train_data$price <= price_955 & train_data$availability_365 == 365, ]
# Fit a GAM model on the filtered dataset
model_gam_train <- gam(
price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = filtered_data
)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Step 1: Calculate the 95.5th percentile of price
price_955 <- quantile(train_data$price, 0.955, na.rm = TRUE)
# Step 2: Filter the data
filtered_data <- train_data[train_data$price <= price_955 & train_data$availability_365 == 365, ]
# Step 3: Fit the GAM model on the filtered dataset
model_gam_train <- gam(
price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = filtered_data
)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Step 1: Calculate the 95.5th percentile of price
price_955 <- quantile(train_data$price, 0.955, na.rm = TRUE)
# Step 2: Filter the data
filtered_data <- train_data[train_data$price <= price_955 & train_data$availability_365 == 365, ]
# Step 3: Fit the GAM model on the filtered dataset
model_gam_train <- gam(
price_955 ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = filtered_data
)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.995, na.rm = TRUE) & availability_365 == 365)
nrow(test_dataset)
test_dataset
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.995, na.rm = TRUE))
nrow(test_dataset)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.995, na.rm = TRUE) & availability_365 > 0)
nrow(test_dataset)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.995, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.995, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.995, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
summary(test_dataset)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.95, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
summary(test_dataset)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.98, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.98, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.98, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
summary(test_data$price)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.995, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
summary(test_data$price)
test_dataset <- data_cleaned %>%
filter(price <= quantile(price, 0.99, na.rm = TRUE) & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
summary(test_data$price)
# test_dataset <- data_cleaned %>%
#  filter(price <= quantile(price, 0.99, na.rm = TRUE) & availability_365 > 0)
test_dataset <- data_cleaned %>%
filter(price <= 1000 & availability_365 > 0)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(test_dataset, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
summary(test_data$price)
nrow(test_dataset)
