train_data <- training(data_split)
test_data <- testing(data_split)
nrow(data_split)
nrows(data_test)
nrow(data_test)
nrow(test_data)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(review_scores_rating),
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
test_data$predicted_price
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
library(mgcv) # GAM
library(gratia)
library(rsample)
library(Metrics)
install.packages("Metrics")
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
library(mgcv) # GAM
library(gratia)
library(rsample)
library(Metrics)
# MAE
mae_value_model_1 <- mae(test_data$price, test_data$predicted_price)
# RMSE
rmse_value_model_1 <- rmse(test_data$price, test_data$predicted_price)
# Print metrics
cat("MAE:", mae_value_model_1, "\n")
cat("RMSE:", rmse_value_model_1, "\n")
library(ggplot2)
# Plot actual vs predicted prices
ggplot(test_data, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs Predicted Prices", x = "Actual Price", y = "Predicted Price") +
theme_minimal()
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(review_scores_rating) + s(bathrooms) + s(bedrooms) + room_type,
data = train_data)
# Summarize the model
summary(model_gam_train)
model_gam <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
summary(model_gam)
model_gam_adjusted <- gam(log_price ~ s(latitude, longitude) + s(accommodates) +
s(bathrooms) + s(bedrooms) + s(review_scores_rating) +
s(availability_365) + te(latitude, longitude, by = room_type) +
room_type + host_is_superhost,
data = train_data, select = TRUE)
model_gam_adjusted <- gam(log(price) ~ s(latitude, longitude) + s(accommodates) +
s(bathrooms) + s(bedrooms) + s(review_scores_rating) +
s(availability_365) + te(latitude, longitude, by = room_type) +
room_type + host_is_superhost,
data = train_data, select = TRUE)
summary(model_gam_adjusted)
# Covert the categorical as a Factor and not incluide missing values
data_cleaned <- BCN_Accomm %>%
filter(!is.na(price), !is.na(latitude), !is.na(longitude), !is.na(room_type), !is.na(bedrooms), !is.na(bathrooms)) %>% # Not include Missing Values
mutate(
room_type = as.factor(room_type),
host_is_superhost = as.factor(host_is_superhost),
neighbourhood = as.factor(neighbourhood)
)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
# Summarize the model
summary(model_gam_train)
# MAE
mae_value_model_1 <- mae(test_data$price, test_data$predicted_price)
# RMSE
rmse_value_model_1 <- rmse(test_data$price, test_data$predicted_price)
# Print metrics
cat("MAE:", mae_value_model_1, "\n")
cat("RMSE:", rmse_value_model_1, "\n")
# Plot actual vs predicted prices
ggplot(test_data, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs Predicted Prices", x = "Actual Price", y = "Predicted Price") +
theme_minimal()
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Split the data (80% train, 20% test)
set.seed(123)
data_split <- initial_split(data_cleaned, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)
test_data$neighbourhood <- factor(test_data$neighbourhood, levels = levels(train_data$neighbourhood))
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost + neighbourhood,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Check levels of a categorical variable
levels(train_data$room_type)
levels(test_data$room_type)
test_data$room_type <- factor(test_data$room_type, levels = levels(train_data$room_type))
test_data$neighbourhood <- factor(test_data$neighbourhood, levels = levels(train_data$neighbourhood))
test_data$host_is_superhost <- factor(test_data$host_is_superhost, levels = levels(train_data$host_is_superhost))
test_data$room_type
# Fit a GAM
model_gam_train <- gam(price ~ s(latitude, longitude) + s(accommodates) + s(bathrooms) +
s(bedrooms) + s(beds) + s(review_scores_rating) + s(host_listings_count) +
s(availability_365) + room_type + property_type + host_is_superhost,
data = train_data)
# Summarize the model
summary(model_gam_train)
# Predict on the test data
test_data$predicted_price <- predict(model_gam_train, newdata = test_data)
# Plot actual vs predicted prices
ggplot(test_data, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs Predicted Prices", x = "Actual Price", y = "Predicted Price") +
theme_minimal()
options(repos = c(CRAN = "https://cran.rstudio.com/"))
#file.edit("~/.Rprofile")
knitr::opts_chunk$set(echo = TRUE)
#options(repos = c(CRAN = "https://cran.rstudio.com/"))
knitr::include_graphics("Barcelona Picture.png")
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
library(mgcv) # GAM
library(gratia)
library(rsample)
library(Metrics)
# import the dataset
BCN_Accomm_full <- read.csv("Cleaned_airbnb_barcelona.csv")
# Structure
glimpse(BCN_Accomm_full)
# Simulated data
data <- data.frame(
success = c(5, 10, 15, 20),    # Number of successes
trials = c(50, 50, 50, 50),    # Total trials
group = c("A", "B", "A", "B"), # Predictor variable (categorical)
age = c(25, 30, 35, 40)        # Predictor variable (continuous)
)
data
# Fit the binomial model
model <- glm(cbind(success, trials - success) ~ group + age,
family = binomial(link = "logit"),
data = data)
# Model summary
summary(model)
ggplot(test, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.5, aes(color = ..density..), stat = "density2d") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
scale_color_viridis_c() +
labs(title = "Observed vs Predicted Prices (GAM)",
x = "Observed Prices",
y = "Predicted Prices") +
theme_minimal()
options(repos = c(CRAN = "https://cran.rstudio.com/"))
#file.edit("~/.Rprofile")
knitr::opts_chunk$set(echo = TRUE)
#options(repos = c(CRAN = "https://cran.rstudio.com/"))
# Load required libraries
library(dplyr)        # Data manipulation and wrangling
library(ggplot2)      # Data visualization
library(tidyr)        # Data tidying
library(RColorBrewer) # Color palettes for visualizations
library(leaflet)      # Interactive maps
library(shiny)        # Building interactive web applications
library(leaflet.extras) # Additional features for leaflet maps
library(corrplot)     # Visualization of correlation matrices
library(mice)         # Handling missing data
library(nnet)         # Multinomial regression model
library(forcats)      # Handling categorical variables
library(patchwork)    # Combining multiple ggplots
library(VGAM)         # Multinomial logistic regression models
library(tidyverse)    # Collection of data science packages
library(e1071)        # Support Vector Machines (SVM)
library(reshape2)     # Data reshaping for ggplot visualizations
library(caret)        # Machine learning and model evaluation
library(wordcloud)    # Wordcloud plot
library(rsample)      # Split dataset into training and testing
library(mgcv)         # Gam Mdels
library(neuralnet)    # Neural Netwotk
# import the dataset
BCN_Accomm_full <- read.csv("Cleaned_airbnb_barcelona.csv")
# Structure
glimpse(BCN_Accomm_full)
set.seed(100)
BCN_Accomm_sub <- sample_n(BCN_Accomm_full, 10000)
glimpse(BCN_Accomm_sub)
BCN_Accomm_sub$price <- gsub(",", "", BCN_Accomm_sub$price) # removed ','
BCN_Accomm_sub$price <- gsub("\\$", "", BCN_Accomm_sub$price) # removed '$' sign
BCN_Accomm_sub$price <- as.numeric(BCN_Accomm_sub$price)  # converted to number format
print('Location of missing values')
# find location of missing values column wise
sapply(BCN_Accomm_sub, function(x) which(is.na(x)))
# count the missing values column wise
sapply(BCN_Accomm_sub, function(x) sum(is.na(x)))
md.pattern(BCN_Accomm_sub, rotate.names = TRUE)
# Total observations
total_rows <- nrow(BCN_Accomm_sub)
# Calculate missing values (count and percentage)
missing_values <- data.frame(
#Variable = names(BCN_Accomm_full),
Missing_Count = colSums(is.na(BCN_Accomm_sub)),
Missing_Percent = paste0(round((colSums(is.na(BCN_Accomm_sub)) / total_rows) * 100, 2), "%"))
# Order DataFrame table in descending order
missing_values <- missing_values[order(-missing_values$Missing_Count), ]
# Display the table
knitr::kable(missing_values,
caption = "Missing Values by Variable",
align = "c")
# Create a new data frame with the imputed review_scores_rating column
imp_BCN_Accomm_sub <- BCN_Accomm_sub %>%
mutate(review_scores_rating = if_else(is.na(review_scores_rating), 0, review_scores_rating))
md.pattern(imp_BCN_Accomm_sub, rotate.names = TRUE)
BCN_Accomm <- na.omit(imp_BCN_Accomm_sub) # from this point we'll use this data set
md.pattern(BCN_Accomm, rotate.names = TRUE)
# Create a correlation matrix for numeric fields
cor_BNC_Accomm <- select_if(BCN_Accomm, is.numeric) %>%
select(-c(id, X, host_id))
# make a data frame
cor_BNC_Accomm <- data.frame(cor_BNC_Accomm)
str(cor_BNC_Accomm)
# print correlation matrix
corrplot(cor(cor_BNC_Accomm), type = "upper", order = "hclust", tl.col = "black")
# Sample Shiny app for leaflet map with neighborhood filter
ui <- fluidPage(
titlePanel("Airbnb Prices by Neighbourhood"),
sidebarLayout(
sidebarPanel(
# Drop down to select neighborhood
selectInput("neighbourhood", "Select Neighbourhood:", choices = sort(unique(BCN_Accomm$neighbourhood)))
),
mainPanel(
leafletOutput("map") # main content area where the map will be displayed
)
)
)
server <- function(input, output, session) {
# Dropdown to select neighbourhood, sorted alphabetically
filtered_data <- reactive({
BCN_Accomm[BCN_Accomm$neighbourhood == input$neighbourhood, ]
})
# Render leaflet map
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
setView(lng = 2.154007, lat = 41.390205, zoom = 12) %>% #Location of Barcelona
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
color = "blue",
popup = ~paste("<b>Price:</b> €", price, "<br>",
"<b>Type:</b>", room_type, "<br>",
"<b>Neighbourhood:</b>", neighbourhood)
)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Mean price per neighbourhood
neighborhood_means <- BCN_Accomm %>%
group_by(neighbourhood) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE))
# Create Map
leaflet(data = BCN_Accomm) %>%
addProviderTiles("CartoDB.Positron") %>%
addHeatmap(
lng = ~longitude,
lat = ~latitude,
intensity = ~price,
blur = 25,
max = 0.03,
radius = 15
) %>%
addMarkers(
data = neighborhood_means,
~longitude, ~latitude,
popup = ~paste(
"<strong>Neighborhood:</strong>", neighbourhood,
"<br><strong>Mean Price (€):</strong>", round(mean_price, 2)
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("viridis", BCN_Accomm$price),
values = BCN_Accomm$price,
title = "Price (€)",
opacity = 0.7
)
#display.brewer.all() #Visualize color palette
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price, color = room_type)) +
geom_point(alpha = 0.6) +
#scale_color_brewer(palette = "Set2") +
labs(title = "Scatter Plot of Review Score Rating vs. Price by Room Type",
x = "Review Score Rating",
y = "Price",
color = "Room Type") +
theme_minimal()
# Create a new column for occupancy rate
BCN_Accomm$occupancy_rate_30 <- (1 - BCN_Accomm$availability_30 / 30) * 100
# Preview the new column
head(BCN_Accomm$occupancy_rate_30)
# Remove rows with the unwanted neighborhoods
BCN_Accomm <- BCN_Accomm[!(BCN_Accomm$neighbourhood %in% c("La Vall d'Hebron", "Torre Baró")), ]
# converting categorical variables into factors
BCN_Accomm$neighbourhood <- as.factor(BCN_Accomm$neighbourhood)
BCN_Accomm$property_type <- as.factor(BCN_Accomm$property_type)
BCN_Accomm$room_type <- as.factor(BCN_Accomm$room_type)
BCN_Accomm$zipcode <- as.factor(BCN_Accomm$zipcode)
BCN_Accomm$availability_30 <- as.factor(BCN_Accomm$availability_30)
# Convert variables that represent counts or continuous numbers into numeric
# If these were read as characters or factors, ensure they're numeric:
if (is.factor(BCN_Accomm$accommodates)) {
BCN_Accomm$accommodates <- as.numeric(as.character(BCN_Accomm$accommodates))
}
if (is.factor(BCN_Accomm$bathrooms)) {
BCN_Accomm$bathrooms <- as.numeric(as.character(BCN_Accomm$bathrooms))
}
if (!is.numeric(BCN_Accomm$bedrooms)) {
BCN_Accomm$bedrooms <- as.numeric(BCN_Accomm$bedrooms)
}
if (!is.numeric(BCN_Accomm$beds)) {
BCN_Accomm$beds <- as.numeric(BCN_Accomm$beds)
}
if (!is.numeric(BCN_Accomm$latitude)) {
BCN_Accomm$latitude <- as.numeric(BCN_Accomm$latitude)
}
if (!is.numeric(BCN_Accomm$longitude)) {
BCN_Accomm$longitude <- as.numeric(BCN_Accomm$longitude)
}
if (!is.numeric(BCN_Accomm$review_scores_rating)) {
BCN_Accomm$review_scores_rating <- as.numeric(BCN_Accomm$review_scores_rating)
}
if (!is.numeric(BCN_Accomm$minimum_nights)) {
BCN_Accomm$minimum_nights <- as.numeric(BCN_Accomm$minimum_nights)
}
# Ensure zipcodes are cleaned or set unknowns
BCN_Accomm$zipcode <- ifelse(grepl("^[0-9]{4}$", BCN_Accomm$zipcode),
# Create a new column for occupancy rate
BCN_Accomm$occupancy_rate_30 <- (1 - BCN_Accomm$availability_30 / 30) * 100
# Preview the new column
head(BCN_Accomm$occupancy_rate_30)
# Remove rows with the unwanted neighborhoods
BCN_Accomm <- BCN_Accomm[!(BCN_Accomm$neighbourhood %in% c("La Vall d'Hebron", "Torre Baró")), ]
# converting categorical variables into factors
BCN_Accomm$neighbourhood <- as.factor(BCN_Accomm$neighbourhood)
BCN_Accomm$property_type <- as.factor(BCN_Accomm$property_type)
BCN_Accomm$room_type <- as.factor(BCN_Accomm$room_type)
BCN_Accomm$zipcode <- as.factor(BCN_Accomm$zipcode)
BCN_Accomm$availability_30 <- as.factor(BCN_Accomm$availability_30)
# Convert variables that represent counts or continuous numbers into numeric
# If these were read as characters or factors, ensure they're numeric:
if (is.factor(BCN_Accomm$accommodates)) {
BCN_Accomm$accommodates <- as.numeric(as.character(BCN_Accomm$accommodates))
}
if (is.factor(BCN_Accomm$bathrooms)) {
BCN_Accomm$bathrooms <- as.numeric(as.character(BCN_Accomm$bathrooms))
}
if (!is.numeric(BCN_Accomm$bedrooms)) {
BCN_Accomm$bedrooms <- as.numeric(BCN_Accomm$bedrooms)
}
if (!is.numeric(BCN_Accomm$beds)) {
BCN_Accomm$beds <- as.numeric(BCN_Accomm$beds)
}
if (!is.numeric(BCN_Accomm$latitude)) {
BCN_Accomm$latitude <- as.numeric(BCN_Accomm$latitude)
}
if (!is.numeric(BCN_Accomm$longitude)) {
BCN_Accomm$longitude <- as.numeric(BCN_Accomm$longitude)
}
if (!is.numeric(BCN_Accomm$review_scores_rating)) {
BCN_Accomm$review_scores_rating <- as.numeric(BCN_Accomm$review_scores_rating)
}
if (!is.numeric(BCN_Accomm$minimum_nights)) {
BCN_Accomm$minimum_nights <- as.numeric(BCN_Accomm$minimum_nights)
}
# Ensure zipcodes are cleaned or set unknowns
BCN_Accomm$zipcode <- ifelse(grepl("^[0-9]{4}$", BCN_Accomm$zipcode),
# Replace invalid zipcodes with "unknown"
BCN_Accomm$zipcode <- ifelse(
grepl("^[0-9]{4}$", BCN_Accomm$zipcode),   # Check if zipcode is exactly 4 digits
BCN_Accomm$zipcode,                        # Keep valid zipcodes
"unknown")                                # Replace invalid zipcodes with "unknown"
set.seed(1000)
# Define the number of groups and the amount of sample for each
group <- sample(2, nrow(BCN_Accomm),
replace = TRUE,
prob = c(0.4, 0.4))
# training data set with around 60% of the samples
train <- BCN_Accomm[group==1,]
# test data set with around 40% of the samples
test <- BCN_Accomm[group==2,]
test <- na.omit(test)
# For all factor variables used in the model, ensure that the test factors have the same levels as train
test$property_type <- factor(test$property_type, levels = levels(train$property_type))
test$room_type <- factor(test$room_type, levels = levels(train$room_type))
test$neighbourhood <- factor(test$neighbourhood, levels = levels(train$neighbourhood))
# Ensure no NAs or infinite values in important numeric variables
numeric_vars <- c("bathrooms", "bedrooms", "accommodates", "beds",
"latitude", "longitude", "review_scores_rating", "minimum_nights")
# Bedrooms vs Price
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "loess", color = "red") + # Loess: on-parametric method for fitting a curve to the data.
labs(title = "Price vs Review Score Ratings", x = "Review Score", y = "Price")+
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
# Gam Model
gam_price <- gam(price ~
s(bathrooms) + s(bedrooms) + s(accommodates) + s(beds) +
s(latitude) + s(longitude) +
s(review_scores_rating) + s(minimum_nights) +
room_type + neighbourhood,
data = train, method = "REML")
# Summary of the occupancy model
summary(gam_price)
# Make sure test has no problematic values before predicting
test$predicted_price <- predict(gam_price, newdata = test)
# Calculate R-squared on the test set
r_squared <- 1 - sum((test$price - test$predicted_price)^2) / sum((test$price - mean(test$price))^2)
cat("R-squared on Test Set: ", r_squared, "\n")
# Plot observed vs predicted with points in blue
ggplot(test, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.5, color = "blue") +  # Set points color to blue
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = "Gam Model: Observed vs Predicted Prices",
x = "Observed Price", y = "Predicted Price") +
theme_minimal()
# Calculate errors
mae_price <- mean(abs(test$price - test$predicted_price))
rmse_price <- sqrt(mean((test$price - test$predicted_price)^2))
r_squared_price <- 1 - sum((test$price - test$predicted_price)^2) / sum((test$price - mean(test$price))^2)
cat("MAE: ", mae_price, "\n")
cat("RMSE: ", rmse_price, "\n")
cat("R-squared: ", r_squared_price, "\n")
ggplot(test, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.5, aes(color = ..density..), stat = "density2d") +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
scale_color_viridis_c() +
labs(title = "Observed vs Predicted Prices (GAM)",
x = "Observed Prices",
y = "Predicted Prices") +
theme_minimal()
setwd("C:/Users/cabar/Documents/Git/Machine-Learning-1")
