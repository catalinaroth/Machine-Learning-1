legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
print(top_neighbourhoods)
# Combine all amenities into a single text string and clean it
amenities_text <- BCN_Accomm$amenities %>%
paste(collapse = " ") %>%                # Combine all rows into one string
gsub("\\[|\\]|'", "", .)                 # Remove brackets and quotes from the field
# Split the text into words and calculate word frequencies
word_freq <- table(unlist(strsplit(amenities_text, ", ")))
# Create the word cloud
wordcloud(words = names(word_freq),
freq = as.numeric(word_freq),
min.freq = 10,                   # Minimum frequency for words to appear
scale = c(3, 0.5),               # Word size scale
random.order = FALSE,            # Words ordered by frequency
colors = brewer.pal(8, "Dark2"))
# Overall Summary: High level statistical overview of all numericvariables in the dataset.
#Concise statistical summary of all the numeric variables:
# Filter numeric variables manually
numeric_variables <- BCN_Accomm %>%
select_if(is.numeric)
# Display the summary directly
summary(numeric_variables)
# Filter numeric variables
numeric_variables <- BCN_Accomm %>%
select_if(is.numeric)
# Calculate descriptive statistics for each numeric variable
numeric_summary <- data.frame(
Min = round(sapply(numeric_variables, min, na.rm = TRUE), 2),
`1st Qu.` = round(sapply(numeric_variables, quantile, probs = 0.25, na.rm = TRUE), 2),
Median = round(sapply(numeric_variables, median, na.rm = TRUE), 2),
Mean = round(sapply(numeric_variables, mean, na.rm = TRUE), 2),
`3rd Qu.` = round(sapply(numeric_variables, quantile, probs = 0.75, na.rm = TRUE), 2),
Max = round(sapply(numeric_variables, max, na.rm = TRUE), 2)
)
# Transpose the table to display variables as rows
numeric_summary <- (numeric_summary)
# Display the table in the report
knitr::kable(numeric_summary,
caption = "Summary Statistics for Numeric Variables",
align = "c")
# Filter relevant columns for objective
# 1. Variables to analyze price
price_variables <- BCN_Accomm %>%
dplyr::select(accommodates, bathrooms, bedrooms, beds,
price, review_scores_rating, number_of_reviews_ltm)
# Calculate descriptive statistics
# For analyzing price
price_stats <- data.frame(
Mean = round(sapply(price_variables, mean, na.rm = TRUE), 2),
Median = round(sapply(price_variables, median, na.rm = TRUE), 2),
Standard_Deviation = round(sapply(price_variables, sd, na.rm = TRUE), 2),
Min = round(sapply(price_variables, min, na.rm = TRUE), 2),
Max = round(sapply(price_variables, max, na.rm = TRUE), 2)
)
# Transpose the tables to display variables as columns
price_stats <- (price_stats)
# Display the table in the report
knitr::kable(price_stats,
caption = "Summary Statistics for Variables Related to Price",
align = "c")
# 2. Variables related availability
availability_variables <- BCN_Accomm %>%
dplyr::select(minimum_nights, availability_30, availability_60,
availability_90, availability_365)
# Calculate descriptive statistics
# For analyzing availability
availability_stats <- data.frame(
Mean = round(sapply(availability_variables, mean, na.rm = TRUE), 2),
Median = round(sapply(availability_variables, median, na.rm = TRUE), 2),
Standard_Deviation = round(sapply(availability_variables, sd, na.rm = TRUE), 2),
Min = round(sapply(availability_variables, min, na.rm = TRUE), 2),
Max = round(sapply(availability_variables, max, na.rm = TRUE), 2)
)
# Transpose the tables to display variables as columns
availability_stats <- (availability_stats)
# Display the table in the report
knitr::kable(availability_stats,
caption = "Summary Statistics for Variables Related to Availability",
align = "c")
#Summary Statistics for Categorical Variables
# Select the most relevant categorical variables
categorical_variables <- BCN_Accomm %>%
dplyr::select(host_is_superhost, neighbourhood, zipcode, property_type, room_type, has_availability)
# Calculate frequency and relative frequency
categorical_summary <- lapply(categorical_variables, function(var) {
freq <- table(var)  # Absolute frequency
rel_freq <- prop.table(freq) * 100  # Relative frequency
data <- data.frame(
Category = names(freq),
Frequency = as.vector(freq),
Percentage = round(as.vector(rel_freq), 2)
)
data <- data[order(-data$Frequency), ]  # Ensure sorting by frequency
data <- head(data, 20)  # Keep only the top 20 categories
data  # Return the top 20 sorted rows
})
# Display results in the report for each categorical variable
for (var_name in names(categorical_summary)) {
cat("\n### Variable:", var_name, "\n\n")
print(knitr::kable(
categorical_summary[[var_name]],
caption = paste("Summary for", var_name, "(Ordered by Frequency)"),
align = "c"
))
}
#Summary Statistics for Categorical Variables
# Select the most relevant categorical variables
categorical_variables <- BCN_Accomm %>%
dplyr::select(host_is_superhost, neighbourhood, zipcode, property_type, room_type, has_availability)
# Calculate frequency and relative frequency
categorical_summary <- lapply(categorical_variables, function(var) {
freq <- table(var)  # Absolute frequency
rel_freq <- prop.table(freq) * 100  # Relative frequency
data <- data.frame(
Category = names(freq),
Frequency = as.vector(freq),
Percentage = round(as.vector(rel_freq), 2)
)
data <- data[order(-data$Frequency), ]  # Ensure sorting by frequency
data <- head(data, 20)  # Keep only the top 20 categories
data  # Return the top 20 sorted rows
})
# Display results in the report for each categorical variable
for (var_name in names(categorical_summary)) {
cat("\n### Variable:", var_name, "\n\n")
print(knitr::kable(
categorical_summary[[var_name]],
caption = paste("Summary for", var_name, "(Ordered by Frequency)"),
align = "c"
))
}
# Replace "BCN_Accomm" with your actual data frame
filtered_data <- BCN_Accomm
# Create an interactive map
leaflet(data = filtered_data) %>%
addTiles() %>%  # Add OpenStreetMap tiles
setView(lng = 2.154007, lat = 41.390205, zoom = 12) %>%  # Center the map in Barcelona
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
color = "blue",
radius = 5,
popup = ~paste(
"<b>Price:</b> €", price, "<br>",
"<b>Room Type:</b>", room_type, "<br>",
"<b>Neighbourhood:</b>", neighbourhood
)  # Popup content
)
# Mean price per neighbourhood
neighborhood_means <- BCN_Accomm %>%
group_by(neighbourhood) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
latitude = mean(latitude, na.rm = TRUE),
longitude = mean(longitude, na.rm = TRUE))
# Create Map
leaflet(data = BCN_Accomm) %>%
addProviderTiles("CartoDB.Positron") %>%
addHeatmap(
lng = ~longitude,
lat = ~latitude,
intensity = ~price,
blur = 25,
max = 0.03,
radius = 15
) %>%
addMarkers(
data = neighborhood_means,
~longitude, ~latitude,
popup = ~paste(
"<strong>Neighborhood:</strong>", neighbourhood,
"<br><strong>Mean Price (€):</strong>", round(mean_price, 2)
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("viridis", BCN_Accomm$price),
values = BCN_Accomm$price,
title = "Price (€)",
opacity = 0.7
)
#display.brewer.all() #Visualize color palette
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price, color = room_type)) +
geom_point(alpha = 0.6) +
#scale_color_brewer(palette = "Set2") +
labs(title = "Scatter Plot of Review Score Rating vs. Price by Room Type",
x = "Review Score Rating",
y = "Price",
color = "Room Type") +
theme_minimal()
# Create a new column for occupancy rate
BCN_Accomm$occupancy_rate_30 <- (1 - BCN_Accomm$availability_30 / 30) * 100
# Preview the new column
head(BCN_Accomm$occupancy_rate_30)
class(BCN_Accomm$occupancy_rate_30)
# Remove rows with the unwanted neighborhoods
BCN_Accomm <- BCN_Accomm[!(BCN_Accomm$neighbourhood %in% c("La Vall d'Hebron", "Torre Baró")), ]
# converting categorical variables into factors
BCN_Accomm$neighbourhood <- as.factor(BCN_Accomm$neighbourhood)
BCN_Accomm$property_type <- as.factor(BCN_Accomm$property_type)
BCN_Accomm$room_type <- as.factor(BCN_Accomm$room_type)
BCN_Accomm$availability_30 <- as.factor(BCN_Accomm$availability_30)
BCN_Accomm$zipcode <- ifelse(grepl("^[0-9]{4}$", BCN_Accomm$zipcode), # Check if zipcode is exactly 4 digits
BCN_Accomm$zipcode, # Keep valid zipcodes
"unknown")
BCN_Accomm$zipcode <- as.factor(BCN_Accomm$zipcode)
# Convert variables that represent counts or continuous numbers into numeric
# If these were read as characters or factors, ensure they're numeric:
if (is.factor(BCN_Accomm$accommodates)) {
BCN_Accomm$accommodates <- as.numeric(as.character(BCN_Accomm$accommodates))
}
if (is.factor(BCN_Accomm$bathrooms)) {
BCN_Accomm$bathrooms <- as.numeric(as.character(BCN_Accomm$bathrooms))
}
if (!is.numeric(BCN_Accomm$bedrooms)) {
BCN_Accomm$bedrooms <- as.numeric(BCN_Accomm$bedrooms)
}
if (!is.numeric(BCN_Accomm$beds)) {
BCN_Accomm$beds <- as.numeric(BCN_Accomm$beds)
}
if (!is.numeric(BCN_Accomm$latitude)) {
BCN_Accomm$latitude <- as.numeric(BCN_Accomm$latitude)
}
if (!is.numeric(BCN_Accomm$longitude)) {
BCN_Accomm$longitude <- as.numeric(BCN_Accomm$longitude)
}
if (!is.numeric(BCN_Accomm$review_scores_rating)) {
BCN_Accomm$review_scores_rating <- as.numeric(BCN_Accomm$review_scores_rating)
}
if (!is.numeric(BCN_Accomm$minimum_nights)) {
BCN_Accomm$minimum_nights <- as.numeric(BCN_Accomm$minimum_nights)
}
set.seed(1000)
# Define the number of groups and the amount of sample for each
group <- sample(2, nrow(BCN_Accomm),
replace = TRUE,
prob = c(0.6, 0.4))
# training data set with around 60% of the samples
train <- BCN_Accomm[group==1,]
# test data set with around 40% of the samples
test <- BCN_Accomm[group==2,]
test <- na.omit(test) # removing rows with NAs values might reduce the size of the test set
str(BCN_Accomm)
# For all factor variables used in the model, ensure that the test factors have the same levels as train
identical(levels(test$occupancy_rate_30), levels(train$occupancy_rate_30))
identical(levels(test$property_type), levels(train$property_type))
identical(levels(test$room_type), levels(train$room_type))
identical(levels(test$neighbourhood), levels(train$neighbourhood))
identical(levels(test$zipcode), levels(train$zipcode))
identical(levels(test$availability_30), levels(train$availability_30))
# Ensure no NAs or infinite values in important numeric variables
numeric_vars <- c("bathrooms", "bedrooms", "accommodates", "beds",
"latitude", "longitude", "review_scores_rating", "minimum_nights", "price", "occupancy_rate_30")
sapply(numeric_vars, function(var) anyNA(train[[var]]))
sapply(numeric_vars, function(var) anyNA(test[[var]]))
# Numeric variables to normalize
numeric_columns <- c("bathrooms", "bedrooms", "accommodates", "beds",
"latitude", "longitude", "review_scores_rating", "minimum_nights", "price")
# Normalize train data (already done)
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
train_normalized <- train
train_normalized[, numeric_columns] <- lapply(train[, numeric_columns], normalize)
# Normalize test data (use train data's min and max for normalization)
test_normalized <- test
test_normalized[, numeric_columns] <- lapply(numeric_columns, function(col) {
(test[[col]] - min(train[[col]])) / (max(train[[col]]) - min(train[[col]]))
})
str(train_normalized)
str(test_normalized)
# One-hot encode 'neighbourhood' in train data for SVM (without including the reference level)
train_neigh_dummies <- model.matrix(~neighbourhood - 1, data=train_normalized)
# Combine the dummy variables with the train data
train_normalized_encod <- cbind(train_normalized, train_neigh_dummies)
# Remove the original 'neighbourhood' column (since it's now one-hot encoded)
train_normalized_encod$neighbourhood <- NULL
# One-hot encode 'neighbourhood' in test data for SVM (use the same levels as in the train data)
test_neigh_dummies <- model.matrix(~neighbourhood - 1, data=test_normalized)
# Ensure test_normalized has the same dummy variables as train_normalized
# Select the columns of the test data to match the train data's one-hot encoded columns
test_neigh_dummies <- test_neigh_dummies[, colnames(train_neigh_dummies), drop = FALSE]
# Combine the dummy variables with the test data
test_normalized_encod <- cbind(test_normalized, test_neigh_dummies)
# Remove the original 'neighborhood' column from test data
test_normalized_encod$neighbourhood <- NULL
pairs(~ price + accommodates + bathrooms + bedrooms + beds + minimum_nights + latitude + longitude + review_scores_rating + occupancy_rate_30, data = train, main = "Matrix of quantitative variables against Price")
pairs(~ price + room_type + property_type + neighbourhood , data = train, main = "Matrix of factor variables against Price")
pairs(~ occupancy_rate_30 + price + accommodates + bathrooms + bedrooms + beds + minimum_nights + latitude + longitude + review_scores_rating, data = train, main = "Matrix of quantitative variables against Occupancy rate")
# Convert variables to factors
BCN_Accomm$host_is_superhost <- as.factor(BCN_Accomm$host_is_superhost)
BCN_Accomm$room_type <- as.factor(BCN_Accomm$room_type)
BCN_Accomm$property_type <- as.factor(BCN_Accomm$property_type)
# Load required libraries
library(ggplot2)
library(patchwork)
# First Plot: Availability by Room Type
plot1 <- ggplot(data = BCN_Accomm, aes(x = room_type, y = availability_30)) +
geom_boxplot() +
labs(x = "Room Type", y = "Availability (30 days)", title = "Availability by Room Type") +
theme(plot.title = element_text(size = 10),
axis.title = element_text(size = 8),
axis.text = element_text(size = 6))
# Second Plot: Availability by Superhost Status
plot2 <- ggplot(data = BCN_Accomm, aes(x = host_is_superhost, y = availability_30)) +
geom_boxplot() +
labs(x = "Superhost Status", y = "Availability (30 days)", title = "Availability by Superhost Status") +
theme(plot.title = element_text(size = 10),
axis.title = element_text(size = 8),
axis.text = element_text(size = 6))
# Combine the plots side by side
(plot1 + plot2) & theme(plot.margin = margin(5, 5, 5, 5))  # Reduce plot margins
# Bedrooms vs Price
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "loess", color = "red") + # Loess: on-parametric method for fitting a curve to the data.
labs(title = "Price vs Review Score Ratings", x = "Review Score", y = "Price")+
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
# Gam Model
gam_price <- gam(price ~
s(bathrooms) + s(bedrooms) + s(accommodates) + s(beds) +
s(latitude) + s(longitude) +
s(review_scores_rating) + s(minimum_nights) +
room_type + neighbourhood,
data = train, method = "REML")
# Summary of the occupancy model
summary(gam_price)
# Bedrooms vs Price
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "loess", color = "red") + # Loess: on-parametric method for fitting a curve to the data.
labs(title = "Price vs Review Score Ratings", x = "Review Score", y = "Price")+
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
dev.off()
# Bedrooms vs Price
ggplot(BCN_Accomm, aes(x = review_scores_rating, y = price)) +
geom_point(color = "blue") +
geom_smooth(method = "loess", color = "red") + # Loess: on-parametric method for fitting a curve to the data.
labs(title = "Price vs Review Score Ratings", x = "Review Score", y = "Price")+
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
# Gam Model
gam_price <- gam(price ~
s(bathrooms) + s(bedrooms) + s(accommodates) + s(beds) +
s(latitude) + s(longitude) +
s(review_scores_rating) + s(minimum_nights) +
room_type + neighbourhood,
data = train, method = "REML")
# Summary of the occupancy model
summary(gam_price)
# Make sure test has no problematic values before predicting
test$predicted_price <- predict(gam_price, newdata = test)
# Calculate R-squared on the test set
r_squared <- 1 - sum((test$price - test$predicted_price)^2) / sum((test$price - mean(test$price))^2)
cat("R-squared on Test Set: ", r_squared, "\n")
# Plot observed vs predicted with points in blue
ggplot(test, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.5, color = "blue") +  # Set points color to blue
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = "Gam Model: Observed vs Predicted Prices",
x = "Observed Price", y = "Predicted Price") +
theme_minimal()
# Calculate errors
mae_price <- mean(abs(test$price - test$predicted_price))
rmse_price <- sqrt(mean((test$price - test$predicted_price)^2))
r_squared_price <- 1 - sum((test$price - test$predicted_price)^2) / sum((test$price - mean(test$price))^2)
cat("MAE: ", mae_price, "\n")
cat("RMSE: ", rmse_price, "\n")
cat("R-squared: ", r_squared_price, "\n")
# Fit the GAM model
gam_occupancy_30 <- gam(occupancy_rate_30 ~
s(latitude) + s(longitude) +
s(bathrooms) + s(bedrooms) + s(accommodates) + s(beds) +
s(price) + s(minimum_nights) +
s(review_scores_rating) + (neighbourhood),
data = train, method = "REML")
# Summary of the GAM model
summary(gam_occupancy_30)
# Make predictions on the test set using gam_occupancy_30
test$predicted_occupancy_30 <- predict(gam_occupancy_30, newdata = test)
# Calculate R-squared on the test set
r_squared_occupancy <- 1 - sum((test$occupancy_rate_30 - test$predicted_occupancy_30)^2) /
sum((test$occupancy_rate_30 - mean(test$occupancy_rate_30))^2)
cat("R-squared on Test Set (Occupancy 30): ", r_squared_occupancy, "\n")
# Plot observed vs predicted occupancy with blue points
ggplot(test, aes(x = occupancy_rate_30, y = predicted_occupancy_30)) +
geom_point(alpha = 0.5, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = "GAM Model: Observed vs Predicted 30 Days Ocuppancy Rate",
x = "Observed Occupancy (30 days)", y = "Predicted Occupancy (30 days)") +
theme_minimal()
# Ensure both variables are numeric
test$availability_30 <- as.numeric(as.character(test$availability_30))
test$predicted_occupancy_30 <- as.numeric(test$predicted_occupancy_30)
# Calculate errors
mae_occ <- mean(abs(test$availability_30 - test$predicted_occupancy_30), na.rm = TRUE)
rmse_occ <- sqrt(mean((test$availability_30 - test$predicted_occupancy_30)^2, na.rm = TRUE))
r_squared_occ <- 1 - sum((test$availability_30 - test$predicted_occupancy_30)^2, na.rm = TRUE) /
sum((test$availability_30 - mean(test$availability_30, na.rm = TRUE))^2)
# Print results
cat("MAE: ", mae_occ, "\n")
cat("RMSE: ", rmse_occ, "\n")
# Formula
formula_nn <- price ~ bathrooms + bedrooms + accommodates + beds +
latitude + longitude + review_scores_rating + minimum_nights
# Train the Neural Network
nn_price <- neuralnet(formula_nn,
data = train_normalized,
hidden = c(3),
linear.output = TRUE)
# Plot
plot(nn_price)
# Summary
summary(nn_price)
plotnet(nn_price)
library(neuralnet)
library(NeuralNetTools)  # For plotnet
install.packages("neuralnet")
install.packages("NeuralNetTolls")
# Load required libraries
library(dplyr)        # Data manipulation and wrangling
library(ggplot2)      # Data visualization
library(tidyr)        # Data tidying
library(RColorBrewer) # Color palettes for visualizations
library(leaflet)      # Interactive maps
library(shiny)        # Building interactive web applications
library(leaflet.extras) # Additional features for leaflet maps
library(corrplot)     # Visualization of correlation matrices
library(mice)         # Handling missing data
library(nnet)         # Multinomial regression model
library(forcats)      # Handling categorical variables
library(patchwork)    # Combining multiple ggplots
library(VGAM)         # Multinomial logistic regression models
library(tidyverse)    # Collection of data science packages
library(e1071)        # Support Vector Machines (SVM)
library(reshape2)     # Data reshaping for ggplot visualizations
library(caret)        # Machine learning and model evaluation
library(wordcloud)    # Wordcloud plot
library(rsample)      # Split dataset into training and testing
library(mgcv)         # Gam Mdels
library(neuralnet)    # Neural Netwotk
library(NeuralNetTools) # Plot Neural network
library(caret)        # confusion matrix
library(car)
library(neuralnet)
library(NeuralNetTools)  # For plotnet
# Formula
formula_nn <- price ~ bathrooms + bedrooms + accommodates + beds +
latitude + longitude + review_scores_rating + minimum_nights
# Train the Neural Network
nn_price <- neuralnet(formula_nn,
data = train_normalized,
hidden = c(3),
linear.output = TRUE)
# Formula
formula_nn <- price ~ bathrooms + bedrooms + accommodates + beds +
latitude + longitude + review_scores_rating + minimum_nights
# Train the Neural Network
nn_price <- neuralnet(formula_nn,
data = train_normalized,
hidden = c(3),
linear.output = TRUE)
# Plot the neural network
plot(nn_price)
# Formula
formula_nn <- price ~ bathrooms + bedrooms + accommodates + beds +
latitude + longitude + review_scores_rating + minimum_nights
# Train the Neural Network
nn_price <- neuralnet(formula_nn,
data = train_normalized,
hidden = c(3),
linear.output = TRUE)
# Plot
plot(nn_price)
# Summary
summary(nn_price)
plotnet(nn_price)
# Prediction
nn_predictions <- compute(nn_price,
test_normalized[, c("bathrooms", "bedrooms", "accommodates",
"beds", "latitude", "longitude",
"review_scores_rating", "minimum_nights")])
# Denormalize the predictions
denormalize <- function(x, original_min, original_max) {
x * (original_max - original_min) + original_min
}
test$predicted_price <- denormalize(nn_predictions$net.result,
min(train$price),
max(train$price))
# Create the plot
nn_plot <- ggplot(test, aes(x = price, y = predicted_price)) +
geom_point(alpha = 0.5, color = "blue") +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = " Neural Network Model : Observed vs Predicted Prices",
x = "Observed Price", y = "Predicted Price") +
theme_minimal()
# Save the plot as a PNG file
ggsave("nn_price_plot.png", plot = nn_plot, width = 8, height = 6)
# Include the saved plot in the knitted document
knitr::include_graphics("nn_price_plot.png")
# Calculate errors
mae_nn <- mean(abs(test$price - test$predicted_price))
rmse_nn <- sqrt(mean((test$price - test$predicted_price)^2))
r_squared_nn <- 1 - sum((test$price - test$predicted_price)^2) / sum((test$price - mean(test$price))^2)
cat("MAE: ", mae_nn, "\n")
cat("RMSE: ", rmse_nn, "\n")
cat("R-squared: ", r_squared_nn, "\n")
