output_file = "Barcelona-Accommodations.html")
f.ols<-ar.ols(log(lynx),order=2,intercept=F)
f.ols
f.yw<-ar.yw(log(lynx),order=2)
f.yw
variable$x.mean
f.yw$x.mean
fit.2<-arima(log(lynx),order=c(2,0,0))
fit.11<-arima(log(lynx),order=c(11,0,0))
fit.2
fit.11
plot(log(lynx), main="Logged Lynx Data with ...")
lines(log(lynx)-fit.2$resid, col="red")
lines(log(lynx)-fit.11$resid, col="blue")
fit.2$residuals
tsdisplay(fit.2$residuals)
# Example: Fitting an AR model
fit <- ar.ols(log(lynx), order.max = 2)
# Extract residuals
residuals <- fit$resid
# Plot ACF and PACF of residuals
acf(residuals, main = "ACF of Residuals")
# Example: Fitting an AR model
fit <- ar.ols(log(lynx), order.max = 2)
# Extract residuals
residuals <- fit$resid
# Plot ACF and PACF of residuals
acf(residuals, main = "ACF of Residuals")
setwd("C:/Users/cabar/Documents/Git/Machine-Learning-1")
# Structure
str(BCN_Accomm_full)
set.seed(100)
BCN_Accomm_sub <- sample_n(BCN_Accomm_full, 10000)
# import the dataset
BCN_Accomm_full <- read.csv("Cleaned_airbnb_barcelona.csv")
# Structure
str(BCN_Accomm_full)
# Sort the column names
sorted_names <- sort(names(BCN_Accomm_full))
# Create a table
column_table <- data.frame(Index = seq_along(sorted_names), Column_Name = sorted_names)
kable(column_table, col.names = c("Index", "Column Name"), caption = "Table 1: Sorted Column Names from Airbnb Dataset")
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
#file.edit("~/.Rprofile")
knitr::opts_chunk$set(echo = TRUE)
#options(repos = c(CRAN = "https://cran.rstudio.com/"))
knitr::include_graphics("Barcelona Picture.png")
install.packages(c("dplyr", "ggplot2", "tidyr", "RColorBrewer", "leaflet", "shiny", "leaflet.extras", "corrplot"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
# import the dataset
BCN_Accomm_full <- read.csv("Cleaned_airbnb_barcelona.csv")
# Structure
str(BCN_Accomm_full)
# Sort the column names
sorted_names <- sort(names(BCN_Accomm_full))
# Create a table
column_table <- data.frame(Index = seq_along(sorted_names), Column_Name = sorted_names)
kable(column_table, col.names = c("Index", "Column Name"), caption = "Table 1: Sorted Column Names from Airbnb Dataset")
set.seed(100)
BCN_Accomm_sub <- sample_n(BCN_Accomm_full, 10000)
glimpse(BCN_Accomm_sub)
summary(BCN_Accomm_full)
set.seed(100)
BCN_Accomm_sub <- sample_n(BCN_Accomm_full, 10000)
glimpse(BCN_Accomm_sub)
#summary(BCN_Accomm_full)
# Structure
glimpse(BCN_Accomm_full)
# Structure
glimpse(BCN_Accomm_full)
# Boxplot for price variable
boxplot(BCN_Accomm$price,
horizontal = TRUE,
axes = FALSE,
staplewex = 1,
ylim = c(2, 500),
main = "Boxplot of Price Variable")
# Calculate Q1, Q3, and IQR for the price variable
Q1 <- quantile(BCN_Accomm$price, 0.25)
# Filter rows Outliers
outlier_extremes <- BCN_Accomm_sub_outlier%>%
filter(is_outlier == TRUE) %>%
select(neighbourhood, property_type, bedrooms, price) %>%
arrange(desc(price)) %>%
slice_head(n = 20)  # Select top 20 Outliers for price
options(repos = c(CRAN = "https://cran.rstudio.com/"))
#file.edit("~/.Rprofile")
knitr::opts_chunk$set(echo = TRUE)
#options(repos = c(CRAN = "https://cran.rstudio.com/"))
knitr::include_graphics("Barcelona Picture.png")
install.packages(c("dplyr", "ggplot2", "tidyr", "RColorBrewer", "leaflet", "shiny", "leaflet.extras", "corrplot", "treemap", "wordcloud"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
library(leaflet)
library(shiny)
library(leaflet.extras)
library(RColorBrewer)
library(mice)
library(corrplot)
library(knitr)
library(treemap)
library(wordcloud)
# import the dataset
BCN_Accomm_full <- read.csv("Cleaned_airbnb_barcelona.csv")
# Structure
glimpse(BCN_Accomm_full)
set.seed(100)
BCN_Accomm_sub <- sample_n(BCN_Accomm_full, 10000)
glimpse(BCN_Accomm_sub)
BCN_Accomm_sub$price <- gsub(",", "", BCN_Accomm_sub$price) # removed ','
BCN_Accomm_sub$price <- gsub("\\$", "", BCN_Accomm_sub$price) # removed '$' sign
BCN_Accomm_sub$price <- as.numeric(BCN_Accomm_sub$price)  # converted to number format
print('Location of missing values')
# find location of missing values column wise
sapply(BCN_Accomm_sub, function(x) which(is.na(x)))
# count the missing values column wise
sapply(BCN_Accomm_sub, function(x) sum(is.na(x)))
print('Location of missing values')
# find location of missing values column wise
sapply(BCN_Accomm_sub, function(x) which(is.na(x)))
# count the missing values column wise
sapply(BCN_Accomm_sub, function(x) sum(is.na(x)))
md.pattern(BCN_Accomm_sub, rotate.names = TRUE)
# Total observations
total_rows <- nrow(BCN_Accomm_sub)
# Calculate missing values (count and percentage)
missing_values <- data.frame(
#Variable = names(BCN_Accomm_full),
Missing_Count = colSums(is.na(BCN_Accomm_sub)),
Missing_Percent = paste0(round((colSums(is.na(BCN_Accomm_sub)) / total_rows) * 100, 2), "%"))
# Order DataFrame table in descending order
missing_values <- missing_values[order(-missing_values$Missing_Count), ]
# Display the table
knitr::kable(missing_values,
caption = "Missing Values by Variable",
align = "c")
# Create a new data frame with the imputed review_scores_rating column
imp_BCN_Accomm_sub <- BCN_Accomm_sub %>%
mutate(review_scores_rating = if_else(is.na(review_scores_rating), 0, review_scores_rating))
md.pattern(imp_BCN_Accomm_sub, rotate.names = TRUE)
BCN_Accomm <- na.omit(imp_BCN_Accomm_sub) # from this point we'll use this data set
md.pattern(BCN_Accomm, rotate.names = TRUE)
# include price - use CR
# Create a correlation matrix for numeric fields
cor_BNC_Accomm <- select_if(BCN_Accomm, is.numeric) %>%
select(-c(id, X, host_id))
# make a data frame
cor_BNC_Accomm <- data.frame(cor_BNC_Accomm)
str(cor_BNC_Accomm)
# print correlation matrix
corrplot(cor(cor_BNC_Accomm), type = "upper", order = "hclust", tl.col = "black")
# Calculate Q1, Q3, and IQR for the price variable
Q1 <- quantile(BCN_Accomm$price, 0.25)
Q3 <- quantile(BCN_Accomm$price, 0.75)
IQR <- Q3 - Q1
# Add a column to indicate outliers
BCN_Accomm_sub_outlier <- BCN_Accomm %>%
mutate(is_outlier = price < (Q1 - 1.5 * IQR) | price > (Q3 + 1.5 * IQR))
# Count the number of outliers
outliers_count <- sum(BCN_Accomm_sub_outlier$is_outlier)
# Display outliers count
outliers_count
# Boxplot for price variable
boxplot(BCN_Accomm$price,
horizontal = TRUE,
axes = FALSE,
staplewex = 1,
ylim = c(2, 500),
main = "Boxplot of Price/Night Variable (USD)")
# X Axis
axis(1, las = 1)
# Add text labels values (Q1, Q3, IQR)
stats <- boxplot.stats(BCN_Accomm$price)$stats
text(x = stats, y = 1.25, labels = stats, pos = 3, cex = 0.9)
# Filter rows Outliers
outlier_extremes <- BCN_Accomm_sub_outlier%>%
filter(is_outlier == TRUE) %>%
select(neighbourhood, property_type, bedrooms, price) %>%
arrange(desc(price), neighbourhood, property_type) %>%
slice_head(n = 20)  # Select top 20 Outliers for price
# Display Prices outliers
knitr::kable(outlier_extremes,
caption = "Table 2: Top 20 and Outliers for Price Variable with Neighbourhood",
align = "c")
# Reshape the data set to long format
BCN_Accomm_hist <- BCN_Accomm %>%
pivot_longer(cols = c(price,
accommodates,
bathrooms,
bedrooms,
beds,
minimum_nights,
number_of_reviews_ltm,
review_scores_rating
),
names_to = "variable", values_to = "value")
# Create histograms with facet_wrap
ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histograms for Numerical Variables", x = "Value", y = "Frequency") +
facet_wrap(~variable, scales = "free") +  # each plot with their own y axes
theme_minimal()
# Calculate percentages and relabel values
superhost_data <- BCN_Accomm %>%
count(host_is_superhost) %>%
mutate(
percentage = n / sum(n) * 100,  # Calculate percentages
host_is_superhost = recode(host_is_superhost, "f" = "False", "t" = "True")  # Relabel
)
# Create the pie chart with percentages
ggplot(superhost_data, aes(x = "", y = n, fill = host_is_superhost)) +
geom_col() +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +  # Add percentages
labs(
title = "Proportion of Superhost Status",
fill = "Superhost Status\n(False = Not a Superhost, True = Superhost)"
) +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Center and bold title
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
# Filter for the top 10 property types and calculate percentages
top_property_types <- BCN_Accomm %>%
count(property_type, sort = TRUE) %>%
slice_max(n, n = 10) %>%  # Keep the top 10 most frequent property types
mutate(percentage = n / sum(n) * 100)  # Calculate percentages
# Create the bar plot with percentages and labels
ggplot(top_property_types, aes(x = reorder(property_type, percentage), y = percentage, fill = property_type)) +
geom_col() +
geom_text(aes(label = paste0(round(percentage, 1))), hjust = -0.2, size = 4) +  # Add percentage labels
coord_flip() +  # Flip coordinates for better readability
labs(title = "Top 10 Property Types by Percentage", x = "Property Type", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))  # Center and bold title)
# Reshape the dataset to long format
BCN_Accomm_long <- BCN_Accomm %>%
pivot_longer(cols = c(room_type), names_to = "variable", values_to = "value")
# Calculate the percentage for each category within the room_type variable
BCN_Accomm_percentage <- BCN_Accomm_long %>%
group_by(variable, value) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Create a barplot
ggplot(BCN_Accomm_percentage, aes(x = value, y = percentage, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Barplot for Room Type", x = "Category", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = bold))
# Reshape the dataset to long format
BCN_Accomm_long <- BCN_Accomm %>%
pivot_longer(cols = c(room_type), names_to = "variable", values_to = "value")
# Calculate the percentage for each category within the room_type variable
BCN_Accomm_percentage <- BCN_Accomm_long %>%
group_by(variable, value) %>%
summarize(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Create a barplot
ggplot(BCN_Accomm_percentage, aes(x = value, y = percentage, fill = variable)) +
geom_bar(stat = "identity") +
labs(title = "Percentage Barplot for Room Type", x = "Category", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
# Boxplot for price variable
price_box <- boxplot(BCN_Accomm$price,
horizontal = TRUE,
axes = FALSE,
staplewex = 1,
ylim = c(2, 500),
main = "Boxplot of Price/Night Variable (USD)")
# X Axis
axis(1, las = 1)
# Add text labels values (Q1, Q3, IQR)
stats <- boxplot.stats(BCN_Accomm$price)$stats
text(x = stats, y = 1.25, labels = stats, pos = 3, cex = 0.9)
print(price_box)
# Filter rows Outliers
outlier_extremes <- BCN_Accomm_sub_outlier%>%
filter(is_outlier == TRUE) %>%
select(neighbourhood, property_type, bedrooms, price) %>%
arrange(desc(price), neighbourhood, property_type) %>%
slice_head(n = 20)  # Select top 20 Outliers for price
# Display Prices outliers
knitr::kable(outlier_extremes,
caption = "Table 2: Top 20 and Outliers for Price Variable with Neighbourhood",
align = "c")
# Reshape the data set to long format
BCN_Accomm_hist <- BCN_Accomm %>%
pivot_longer(cols = c(price,
accommodates,
bathrooms,
bedrooms,
beds,
minimum_nights,
number_of_reviews_ltm,
review_scores_rating
),
names_to = "variable", values_to = "value")
# Create histograms with facet_wrap
ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histograms for Numerical Variables", x = "Value", y = "Frequency") +
facet_wrap(~variable, scales = "free") +  # each plot with their own y axes
theme_minimal()
# Reshape the data set to long format
BCN_Accomm_hist <- BCN_Accomm %>%
pivot_longer(cols = c(price,
accommodates,
bathrooms,
bedrooms,
beds,
minimum_nights,
number_of_reviews_ltm,
review_scores_rating
),
names_to = "variable", values_to = "value")
# Create histograms with facet_wrap
hist_num <- ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histograms for Numerical Variables", x = "Value", y = "Frequency") +
facet_wrap(~variable, scales = "free") +  # each plot with their own y axes
theme_minimal()
print(hist_num)
# Reshape the data set to long format
BCN_Accomm_hist <- BCN_Accomm %>%
pivot_longer(cols = c(price,
accommodates,
bathrooms,
bedrooms,
beds,
minimum_nights,
number_of_reviews_ltm,
review_scores_rating
),
names_to = "variable", values_to = "value")
# Create histograms with facet_wrap
hist_num <- ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histograms for Numerical Variables", x = "Value", y = "Frequency") +
facet_wrap(~variable, scales = "free") +  # each plot with their own y axes
theme_minimal()
print(hist_num)
# Reshape the data set to long format
BCN_Accomm_hist <- BCN_Accomm %>%
pivot_longer(cols = c(price,
accommodates,
bathrooms,
bedrooms,
beds,
minimum_nights,
number_of_reviews_ltm,
review_scores_rating
),
names_to = "variable", values_to = "value")
# Create histograms with facet_wrap
hist_num <- ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histograms for Numerical Variables", x = "Value", y = "Frequency") +
facet_wrap(~variable, scales = "free") +  # each plot with their own y axes
theme_minimal()
hist_num
# Reshape the data set to long format
BCN_Accomm_hist <- BCN_Accomm %>%
pivot_longer(cols = c(price,
accommodates,
bathrooms,
bedrooms,
beds,
minimum_nights,
number_of_reviews_ltm,
review_scores_rating),
names_to = "variable", values_to = "value")
# Create histograms with facet_wrap
hist_num <- ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(
title = "Histograms for Numerical Variables",
x = "Value",
y = "Frequency"
) +
facet_wrap(~variable, scales = "free", ncol = 2) +  # Limit to 2 columns for better layout
theme_minimal() +
theme(
strip.text = element_text(size = 12, face = "bold"),  # Larger facet titles
axis.text.x = element_text(size = 10),  # Larger x-axis text
axis.text.y = element_text(size = 10),  # Larger y-axis text
plot.title = element_text(size = 14, face = "bold", hjust = 0.5)  # Centered title
)
print(hist_num)
# Reshape the data set to long format
BCN_Accomm_hist <- BCN_Accomm %>%
pivot_longer(cols = c(price,
accommodates,
bathrooms,
bedrooms,
beds,
minimum_nights,
number_of_reviews_ltm,
review_scores_rating
),
names_to = "variable", values_to = "value")
# Create histograms with facet_wrap
hist_num <- ggplot(BCN_Accomm_hist, aes(x = value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histograms for Numerical Variables", x = "Value", y = "Frequency") +
facet_wrap(~variable, scales = "free") +  # each plot with their own y axes
theme_minimal()
print(hist_num)
# Calculate percentages and relabel values
superhost_data <- BCN_Accomm %>%
count(host_is_superhost) %>%
mutate(
percentage = n / sum(n) * 100,  # Calculate percentages
host_is_superhost = recode(host_is_superhost, "f" = "False", "t" = "True")  # Relabel
)
# Create the pie chart with percentages
pc_sh_status <- ggplot(superhost_data, aes(x = "", y = n, fill = host_is_superhost)) +
geom_col() +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5)) +  # Add percentages
labs(
title = "Proportion of Superhost Status",
fill = "Superhost Status\n(False = Not a Superhost, True = Superhost)"
) +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Center and bold title
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
print(pc_sh_status)
# Filter for the top 10 property types and calculate percentages
top_property_types <- BCN_Accomm %>%
count(property_type, sort = TRUE) %>%
slice_max(n, n = 10) %>%  # Keep the top 10 most frequent property types
mutate(percentage = n / sum(n) * 100)  # Calculate percentages
# Create the bar plot with percentages and labels
top_property <- ggplot(top_property_types, aes(x = reorder(property_type, percentage), y = percentage, fill = property_type)) +
geom_col() +
geom_text(aes(label = paste0(round(percentage, 1))), hjust = -0.2, size = 4) +  # Add percentage labels
coord_flip() +  # Flip coordinates for better readability
labs(title = "Top 10 Property Types by Percentage", x = "Property Type", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))  # Center and bold title)
print(top_property)
# Filter for the top 10 neighbourhoods and calculate percentages
top_neighbourhoods <- BCN_Accomm %>%
count(neighbourhood, sort = TRUE) %>%
slice_max(n, n = 10) %>%
mutate(percentage = n / sum(n) * 100)  # Calculate percentages
# Create the plot with percentages and labels
top_neighbourhoods <- ggplot(top_neighbourhoods, aes(x = reorder(neighbourhood, percentage), y = percentage, fill = neighbourhood)) +
geom_col() +
geom_text(aes(label = paste0(round(percentage, 1))), hjust = -0.2, size = 4) +  # Add percentage labels
coord_flip() +
labs(title = "Top 10 Neighbourhoods by Percentage", x = "Neighbourhood", y = "Percentage (%)") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
print(top_neighbourhoods)
amenities_text <- BCN_Accomm$amenities %>%
paste(collapse = " ") %>%                # Combine all rows into one string
gsub("\\[|\\]|'", "", .)                 # Remove brackets and quotes from the field
# Split the text into words and calculate word frequencies
word_freq <- table(unlist(strsplit(amenities_text, ", ")))
# Create the word cloud
wc_amaneties <-wordcloud(words = names(word_freq),
freq = as.numeric(word_freq),
min.freq = 10,                   # Minimum frequency for words to appear
scale = c(3, 0.5),               # Word size scale
random.order = FALSE,            # Words ordered by frequency
colors = brewer.pal(8, "Dark2")) +
labs(title = "Worldcloud for amenities")+
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold"))
install.packages(c("dplyr", "ggplot2", "tidyr", "RColorBrewer", "leaflet", "shiny", "leaflet.extras", "corrplot", "treemap", "wordcloud", "sf"))
